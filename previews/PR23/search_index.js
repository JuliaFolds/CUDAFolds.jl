var documenterSearchIndex = {"docs":
[{"location":"examples/findminmax/","page":"findminmax","title":"findminmax","text":"EditURL = \"https://github.com/JuliaFolds/FoldsCUDA.jl/blob/master/examples/findminmax.jl\"","category":"page"},{"location":"examples/findminmax/#findminmax","page":"findminmax","title":"findminmax","text":"","category":"section"},{"location":"examples/findminmax/","page":"findminmax","title":"findminmax","text":"using Transducers\nusing CUDA\nusing FoldsCUDA\nusing FLoops\n\nfunction findminmax(xs, ex = xs isa CuArray ? CUDAEx() : ThreadedEx())\n    xtypemax = typemax(eltype(xs))\n    xtypemin = typemin(eltype(xs))\n    @floop ex for (x, i) in zip(xs, eachindex(xs))\n        @reduce() do (imin = -1; i), (xmin = xtypemax; x)\n            if xmin > x\n                xmin = x\n                imin = i\n            end\n        end\n        @reduce() do (imax = -1; i), (xmax = xtypemin; x)\n            if xmax < x\n                xmax = x\n                imax = i\n            end\n        end\n    end\n    return (; imin, xmin, imax, xmax)\nend\n\nfunction findminmax_base(xs)\n    xmin, imin = findmin(xs)\n    xmax, imax = findmax(xs)\n    return (; imin, xmin, imax, xmax)\nend\nnothing  # hide","category":"page"},{"location":"examples/findminmax/","page":"findminmax","title":"findminmax","text":"xs = [700, 900, 500, 200, 700, 700, 900, 300, 600, 400, 900, 600, 900, 800, 600]\nif has_cuda_gpu()\n    xs = CuArray(xs)\nend\n\nresult = findminmax(xs)","category":"page"},{"location":"examples/findminmax/","page":"findminmax","title":"findminmax","text":"@assert result == findminmax_base(xs)","category":"page"},{"location":"examples/findminmax/","page":"findminmax","title":"findminmax","text":"","category":"page"},{"location":"examples/findminmax/","page":"findminmax","title":"findminmax","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"EditURL = \"https://github.com/JuliaFolds/FoldsCUDA.jl/blob/master/examples/histogram_msd.jl\"","category":"page"},{"location":"examples/histogram_msd/#Histogram-of-the-most-significant-digit-(MSD)","page":"Histogram of MSD","title":"Histogram of the most significant digit (MSD)","text":"","category":"section"},{"location":"examples/histogram_msd/#An-allocation-free-function-to-compute-MSD","page":"Histogram of MSD","title":"An allocation-free function to compute MSD","text":"","category":"section"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"function msd(x::Real)\n    x = abs(x)\n    d = x\n    while true\n        x < 1 && return floor(Int, d)\n        d = x\n        x รท= 10\n    end\nend\nnothing  # hide","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"msd(34513)","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"msd(-51334)","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"msd(2.76e19)","category":"page"},{"location":"examples/histogram_msd/#Computing-histogram-of-MSD","page":"Histogram of MSD","title":"Computing histogram of MSD","text":"","category":"section"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"using CUDA\nusing FLoops\nusing FoldsCUDA\nusing Setfield\n\nfunction histogram_msd(xs, ex = xs isa CuArray ? CUDAEx() : ThreadedEx())\n    zs = ntuple(_ -> 0, 9)  # a tuple of 9 zeros\n    @floop ex for x in xs\n        d = msd(x)\n        1 <= d <= 9 || continue  # skip it if `msd` returns 0\n        h2 = @set zs[d] = 1      # set `d`-th position of the tuple to 1\n        @reduce(h1 = zs .+ h2)   # point-wise addition merges the histogram\n    end\n    return h1\nend\nnothing  # hide","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"Generate some random numbers","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"xs = let randn = has_cuda_gpu() ? CUDA.randn : randn\n    exp.(10.0 .* (randn(10^8) .+ 6))\nend\n@assert all(isfinite, xs)\ncollect(view(xs, 1:10))  # preview","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"Pass an array of (real) numbers to histogram_msd to compute the histogram of MSD:","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"hist = histogram_msd(xs)","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"Frequency in percentage:","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"pairs(round.((collect(hist) ./ length(xs) .* 100); digits = 1))","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"","category":"page"},{"location":"examples/histogram_msd/","page":"Histogram of MSD","title":"Histogram of MSD","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"FoldsCUDA.jl","title":"FoldsCUDA.jl","text":"CurrentModule = FoldsCUDA","category":"page"},{"location":"#FoldsCUDA.jl","page":"FoldsCUDA.jl","title":"FoldsCUDA.jl","text":"","category":"section"},{"location":"","page":"FoldsCUDA.jl","title":"FoldsCUDA.jl","text":"FoldsCUDA\nFoldsCUDA.foldx_cuda\nFoldsCUDA.transduce_cuda\nFoldsCUDA.CUDAEx","category":"page"},{"location":"#FoldsCUDA.FoldsCUDA","page":"FoldsCUDA.jl","title":"FoldsCUDA.FoldsCUDA","text":"FoldsCUDA\n\nFoldsCUDA.jl provides Transducers.jl-compatible fold (reduce) implemented using CUDA.jl.  This brings the transducers and reducing function combinators implemented in Transducers.jl to GPU.  Furthermore, using FLoops.jl, you can write parallel for loops that run on GPU.\n\nAPI\n\nfoldx_cuda: a GPU equivalent of parallel extended fold Transducers.foldxt.\nCUDAEx: a parallel loop executor for FLoops.jl.\n\nSee the documentation of Transducers.jl and FLoops.jl for more information.\n\nExamples\n\nfindmax using FLoops.jl\n\nYou can pass CUDA executor FoldsCUDA.CUDAEx() to @floop to run a parallel for loop on GPU:\n\njulia> using FoldsCUDA, CUDA, FLoops\n\njulia> using GPUArrays: @allowscalar\n\njulia> xs = CUDA.rand(10^8);\n\njulia> @allowscalar xs[100] = 2;\n\njulia> @allowscalar xs[200] = 2;\n\njulia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))\n           @reduce() do (imax = -1; i), (xmax = -Inf32; x)\n               if xmax < x\n                   xmax = x\n                   imax = i\n               end\n           end\n       end\n\njulia> xmax\n2.0f0\n\njulia> imax  # the *first* position for the largest value\n100\n\nextrema using Transducers.TeeRF\n\njulia> using Transducers\n\njulia> @allowscalar xs[300] = -0.5;\n\njulia> foldx_cuda(TeeRF(min, max), xs)\n(-0.5f0, 2.0f0)\n\njulia> foldx_cuda(TeeRF(min, max), (2x for x in xs))  # iterator comprehension works\n(-1.0f0, 4.0f0)\n\njulia> foldx_cuda(TeeRF(min, max), Map(x -> 2x), xs)  # equivalent, using a transducer\n(-1.0f0, 4.0f0)\n\n\n\n\n\n","category":"module"},{"location":"#FoldsCUDA.foldx_cuda","page":"FoldsCUDA.jl","title":"FoldsCUDA.foldx_cuda","text":"foldx_cuda(op[, xf], xs; init)\ntransduce_cuda(op[, xf], init, xs)\n\nExtended fold backed up by CUDA.\n\n\n\n\n\n","category":"function"},{"location":"#FoldsCUDA.transduce_cuda","page":"FoldsCUDA.jl","title":"FoldsCUDA.transduce_cuda","text":"foldx_cuda(op[, xf], xs; init)\ntransduce_cuda(op[, xf], init, xs)\n\nExtended fold backed up by CUDA.\n\n\n\n\n\n","category":"function"},{"location":"#FoldsCUDA.CUDAEx","page":"FoldsCUDA.jl","title":"FoldsCUDA.CUDAEx","text":"CUDAEx()\n\nFLoops.jl executor implemented using CUDA.jl.\n\n\n\n\n\n","category":"type"}]
}
