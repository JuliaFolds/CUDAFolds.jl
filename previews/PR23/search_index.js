var documenterSearchIndex = {"docs":
[{"location":"","page":"FoldsCUDA.jl","title":"FoldsCUDA.jl","text":"CurrentModule = FoldsCUDA","category":"page"},{"location":"#FoldsCUDA.jl","page":"FoldsCUDA.jl","title":"FoldsCUDA.jl","text":"","category":"section"},{"location":"","page":"FoldsCUDA.jl","title":"FoldsCUDA.jl","text":"FoldsCUDA\nFoldsCUDA.foldx_cuda\nFoldsCUDA.CUDAEx","category":"page"},{"location":"#FoldsCUDA.FoldsCUDA","page":"FoldsCUDA.jl","title":"FoldsCUDA.FoldsCUDA","text":"FoldsCUDA\n\nFoldsCUDA.jl provides Transducers.jl-compatible fold (reduce) implemented using CUDA.jl.  This brings the transducers and reducing function combinators implemented in Transducers.jl to GPU.  Furthermore, using FLoops.jl, you can write parallel for loops that run on GPU.\n\nAPI\n\nfoldx_cuda: a GPU equivalent of parallel extended fold Transducers.foldxt.\nCUDAEx: a parallel loop executor for FLoops.jl.\n\nSee the documentation of Transducers.jl and FLoops.jl for more information.\n\nExamples\n\nfindmax using FLoops.jl\n\nYou can pass CUDA executor FoldsCUDA.CUDAEx() to @floop to run a parallel for loop on GPU:\n\njulia> using FoldsCUDA, CUDA, FLoops\n\njulia> using GPUArrays: @allowscalar\n\njulia> xs = CUDA.rand(10^8);\n\njulia> @allowscalar xs[100] = 2;\n\njulia> @allowscalar xs[200] = 2;\n\njulia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))\n           @reduce() do (imax = -1; i), (xmax = -Inf32; x)\n               if xmax < x\n                   xmax = x\n                   imax = i\n               end\n           end\n       end\n\njulia> xmax\n2.0f0\n\njulia> imax  # the *first* position for the largest value\n100\n\nextrema using Transducers.TeeRF\n\njulia> using Transducers\n\njulia> @allowscalar xs[300] = -0.5;\n\njulia> foldx_cuda(TeeRF(min, max), xs)\n(-0.5f0, 2.0f0)\n\njulia> foldx_cuda(TeeRF(min, max), (2x for x in xs))  # iterator comprehension works\n(-1.0f0, 4.0f0)\n\njulia> foldx_cuda(TeeRF(min, max), Map(x -> 2x), xs)  # equivalent, using a transducer\n(-1.0f0, 4.0f0)\n\n\n\n\n\n","category":"module"},{"location":"#FoldsCUDA.foldx_cuda","page":"FoldsCUDA.jl","title":"FoldsCUDA.foldx_cuda","text":"foldx_cuda(op[, xf], xs; init)\ntransduce_cuda(op[, xf], init, xs)\n\nExtended fold backed up by CUDA.\n\n\n\n\n\n","category":"function"},{"location":"#FoldsCUDA.CUDAEx","page":"FoldsCUDA.jl","title":"FoldsCUDA.CUDAEx","text":"CUDAEx()\n\nFLoops.jl executor implemented using CUDA.jl.\n\n\n\n\n\n","category":"type"}]
}
